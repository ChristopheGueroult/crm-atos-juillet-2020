✔ transclusions multiples @done(20-07-21 09:56)
✔ TextModule et encapsulation @done(20-07-21 09:56)
✔ life cycles @done(20-07-21 11:27)
✔ components intelligents vs components stupides @done(20-07-21 11:27)
✔ router config @done(20-07-21 13:06)
✔ lazy loading @done(20-07-21 13:06)
✔ modules routing @done(20-07-21 14:31)
✔ enable tracing @done(20-07-21 14:31)
✔ router events @done(20-07-21 14:31)
✔ Templates @done(20-07-23 08:51)
✔ pipes @done(20-07-23 08:51)
✔ pipe perso @done(20-07-23 08:51)
✔ pipe async @done(20-07-23 08:51)
✔ directive perso @done(20-07-23 08:51)
✔ TP page clients @done(20-07-23 15:58)
  ✔ créer un enum (db.json) ACTIVE INACTIVE @done(20-07-23 15:58)
  ✔ créer une interface ClientI (db.json) @done(20-07-23 15:58)
  ✔ model Client avec comme valeur par défaut la tva à 20 et le state à StateClient.ACTIVE @done(20-07-23 15:58)
  ✔ créer ClientsService en prenant exemple sur OrdersService @done(20-07-23 15:58)
  ✔ compléter PageClientsComponent.ts et .html en prenant exemple sur PageOrdersComponent @done(20-07-23 15:58)
  ✔ pour le html utiliser template-one-col, table-dark ou table-light, app-text-bandeau, le meme directive appState, créez un Pipe qui return le total ttc à partir de totalCaHt. Pour les colones du tableau [name, total ht, tva, total ttc, state] @done(20-07-23 15:58)

☐ TP theme 2
  ☐ créer un service dans core/ ThemeService
  ☐ sur ce service, une variable theme$: Subject<string> = new Subject()
  ☐ sur ce service une fonction qui récupère un param string et qui modifie le flux de donnée : this.theme$.next(param)
  ☐ dans header component ts
    ☐ injection de ThemeService (private ts: ThemeService)
    ☐ créer fonction changeTheme(event) qui appel this.ts.changeTheme(event.target.value)
    ☐ dans le html ajouter un select avec 2 option pour value theme1 et value theme2
    ☐ sur le select ajouter un (change)="changeTheme($event)"
  ☐ dans app component ts
    ☐ injecter ThemeService (private ts: ThemeService)
    ☐ créer une variable theme: string;
    ☐ souscrire à this.ts.theme$ pour affecter la valeur du subscribe à la variable theme
    ☐ dans le html sur la balise <app-ui> ajouter une [ngClass]="{'theme2': theme === 'theme2'}"

☐ pipe async

composants angular :

modules => découper l'appli déclarer des composants, exporter des composants et des modules
components => affichage => components intelligents vs components stupides
pipes => class vocation à récupérer des datas en entrée et return ces datas transformées
directives => éxécuter du js sur n'importe quel template html et n'importe quel html element du dom
services => injection de dépendances par constructor qui permettent de partager des datas entre composants peut importe leur relation hiérarchique
enums
interfaces
models

techniques :

les transclusion avec ng-content => permet de projeter du html dans un template html
les @Input() => permet de binder des datas d'un composant parent vers un composant enfant
les services => permet de communiquer entre plusieurs composants
les @Output() => permet de binder des datas d'un composant enfant vers un composant parent
le property binding avec la syntaxe  avec [] ou sans []
l'event binding avec la syntaxe ()
les appels http avec HttpClient => Observables()
le router avec lazyloading et preloading strategy
l'encapsulation => mode emulated et le None quand on veut avoir un fichier de component scss avec des styles globaux

life cycles :

router events :


☐ tp edit order
  ☐ orders component ts ajouter dans headers[] le nom de la colone action
  ☐ orders component html ajouter un td avec icon edit
  ☐ au click sur l'icon edit on appel une fontion edit(item)
  ☐ dans le ts on créé la fonction edit(item) qui redirige vers la route orders/edit/1
  ☐ créer le component page-edit
  ☐ dans orders routing module : créer une route edit/:id (qui prend un id dans l'url)
  ☐ sur page edit component.ts :
    ☐ récupérer l'id dans l'url
    ☐ appeler la méthode getItemById(id) de ordersService
    ☐ faire le subscribe pour récupérer dans le subscribe l'item qui est retourné par l'api
    ☐ dans page edit component html
      ☐ utilise un template component
      ☐ utilise form order component
      ☐ on bing l'item récupéré avec FormOrderComponent.initItem (@Input())
    ☐ dans page edit component html utiliser l'@Output() clickek que l'on bing avec une fonction edit($event)
    ☐ dans page edit component ts on crée la fonction edit(item: Order) et qui utilise this.os.update(item).subscribe()
    ☐ dans le subscribe() on récupère la réponse de l'api et on fait une redirection vers la route 'orders
